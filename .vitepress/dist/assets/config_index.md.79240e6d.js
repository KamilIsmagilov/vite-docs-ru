import{o as e,c as s,d as n}from"./app.877e1a61.js";const a='{"title":"Конфигурация Vite","description":"","frontmatter":{},"headers":[{"level":2,"title":"Config File","slug":"config-file"},{"level":3,"title":"Config File Resolving (обнаружение конфига)","slug":"config-file-resolving-обнаружение-конфига"},{"level":3,"title":"Config Intellisense","slug":"config-intellisense"},{"level":3,"title":"Config с условиями","slug":"config-с-усnовиями"},{"level":3,"title":"Ассинхронный Config","slug":"ассинхронный-config"},{"level":2,"title":"Общие опции (для Server и Build)","slug":"общие-опции-дnя-server-и-build"},{"level":3,"title":"root","slug":"root"},{"level":3,"title":"base","slug":"base"},{"level":3,"title":"mode","slug":"mode"},{"level":3,"title":"define","slug":"define"},{"level":3,"title":"plugins","slug":"plugins"},{"level":3,"title":"publicDir","slug":"publicdir"},{"level":3,"title":"cacheDir","slug":"cachedir"},{"level":3,"title":"resolve.alias","slug":"resolve-alias"},{"level":3,"title":"resolve.dedupe","slug":"resolve-dedupe"},{"level":3,"title":"resolve.conditions","slug":"resolve-conditions"},{"level":3,"title":"resolve.mainFields","slug":"resolve-mainfields"},{"level":3,"title":"resolve.extensions","slug":"resolve-extensions"},{"level":3,"title":"css.modules","slug":"css-modules"},{"level":3,"title":"css.postcss","slug":"css-postcss"},{"level":3,"title":"css.preprocessorOptions","slug":"css-preprocessoroptions"},{"level":3,"title":"json.namedExports","slug":"json-namedexports"},{"level":3,"title":"json.stringify","slug":"json-stringify"},{"level":3,"title":"esbuild","slug":"esbuild"},{"level":3,"title":"assetsInclude","slug":"assetsinclude"},{"level":3,"title":"logLevel","slug":"loglevel"},{"level":3,"title":"clearScreen","slug":"clearscreen"},{"level":3,"title":"envDir","slug":"envdir"},{"level":3,"title":"envPrefix","slug":"envprefix"},{"level":2,"title":"Server Options","slug":"server-options"},{"level":3,"title":"server.host","slug":"server-host"},{"level":3,"title":"server.port","slug":"server-port"},{"level":3,"title":"server.strictPort","slug":"server-strictport"},{"level":3,"title":"server.https","slug":"server-https"},{"level":3,"title":"server.open","slug":"server-open"},{"level":3,"title":"server.proxy","slug":"server-proxy"},{"level":3,"title":"server.cors","slug":"server-cors"},{"level":3,"title":"server.force","slug":"server-force"},{"level":3,"title":"server.hmr","slug":"server-hmr"},{"level":3,"title":"server.watch","slug":"server-watch"},{"level":3,"title":"server.middlewareMode","slug":"server-middlewaremode"},{"level":3,"title":"server.fs.strict","slug":"server-fs-strict"},{"level":3,"title":"server.fs.allow","slug":"server-fs-allow"},{"level":2,"title":"Build Options","slug":"build-options"},{"level":3,"title":"build.target","slug":"build-target"},{"level":3,"title":"build.polyfillModulePreload","slug":"build-polyfillmodulepreload"},{"level":3,"title":"build.outDir","slug":"build-outdir"},{"level":3,"title":"build.assetsDir","slug":"build-assetsdir"},{"level":3,"title":"build.assetsInlineLimit","slug":"build-assetsinlinelimit"},{"level":3,"title":"build.cssCodeSplit","slug":"build-csscodesplit"},{"level":3,"title":"build.sourcemap","slug":"build-sourcemap"},{"level":3,"title":"build.rollupOptions","slug":"build-rollupoptions"},{"level":3,"title":"build.commonjsOptions","slug":"build-commonjsoptions"},{"level":3,"title":"build.dynamicImportVarsOptions","slug":"build-dynamicimportvarsoptions"},{"level":3,"title":"build.lib","slug":"build-lib"},{"level":3,"title":"build.manifest","slug":"build-manifest"},{"level":3,"title":"build.minify","slug":"build-minify"},{"level":3,"title":"build.terserOptions","slug":"build-terseroptions"},{"level":3,"title":"build.write","slug":"build-write"},{"level":3,"title":"build.emptyOutDir","slug":"build-emptyoutdir"},{"level":3,"title":"build.brotliSize","slug":"build-brotlisize"},{"level":3,"title":"build.chunkSizeWarningLimit","slug":"build-chunksizewarninglimit"},{"level":3,"title":"build.watch","slug":"build-watch"},{"level":2,"title":"Dep Optimization Options","slug":"dep-optimization-options"},{"level":3,"title":"optimizeDeps.entries","slug":"optimizedeps-entries"},{"level":3,"title":"optimizeDeps.exclude","slug":"optimizedeps-exclude"},{"level":3,"title":"optimizeDeps.include","slug":"optimizedeps-include"},{"level":3,"title":"optimizeDeps.keepNames","slug":"optimizedeps-keepnames"},{"level":2,"title":"SSR Options","slug":"ssr-options"},{"level":3,"title":"ssr.external","slug":"ssr-external"},{"level":3,"title":"ssr.noExternal","slug":"ssr-noexternal"},{"level":3,"title":"ssr.target","slug":"ssr-target"}],"relativePath":"config/index.md","lastUpdated":1631743732450}',o={},t=[n('<h1 id="конфигурация-vite" tabindex="-1">Конфигурация Vite <a class="header-anchor" href="#конфигурация-vite" aria-hidden="true">#</a></h1><h2 id="config-file" tabindex="-1">Config File <a class="header-anchor" href="#config-file" aria-hidden="true">#</a></h2><h3 id="config-file-resolving-обнаружение-конфига" tabindex="-1">Config File Resolving (обнаружение конфига) <a class="header-anchor" href="#config-file-resolving-обнаружение-конфига" aria-hidden="true">#</a></h3><p>Когда вы запускаете <code>vite</code> из командной строки, Vite попытается автоматически найти конфиг файл с именем <code>vite.config.js</code> внутри <a href="/guide/#index-html-and-project-root">корневой директории вашего проекта</a>.</p><p>В самом базовом виде конфиг файл выглядит как-то так:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// config options</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Заметьте, Vite поддерживает использование синтаксиса ES модулей в конфиг файле, даже если в проекте не используются нативные Node ESM через <code>type: &quot;module&quot;</code>. В этом случае, конфиг файл авто преобрабатывается до загркзуки.</p><p>Вы также можете явно указать, какой конфиг файл нужно использовать с помощью CLI опции <code>--config</code> (резолвится относительно <code>cwd</code>):</p><div class="language-bash"><pre><code>vite --config my-config.js\n</code></pre></div><h3 id="config-intellisense" tabindex="-1">Config Intellisense <a class="header-anchor" href="#config-intellisense" aria-hidden="true">#</a></h3><p>Поскольку Vite поставляется с TypeScript typings, вы можете использовать intellisense в вашей IDE с подсказками типов от jsdoc:</p><div class="language-js"><pre><code><span class="token comment">/**\n * @type {import(&#39;vite&#39;).UserConfig}\n */</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config\n</code></pre></div><p>Как альтернативный вариант, вы можете использовать <code>defineConfig</code> хелпер, который должен предоставлять intellisense без написания jsdoc аннотаций:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Vite также на прямую поддерживает TS конфиг файлы. Вы можете также использовать <code>vite.config.ts</code> с <code>defineConfig</code> хелпером.</p><h3 id="config-с-усnовиями" tabindex="-1">Config с условиями <a class="header-anchor" href="#config-с-усnовиями" aria-hidden="true">#</a></h3><p>Если в конфиге нужно использовать условия, зависящие от команды (<code>serve</code> или <code>build</code>) или же вы используете <a href="/guide/env-and-mode.html">mode</a>, то вы можете экспортировать функцию с блоками return:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token comment">// serve specific config</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token comment">// build specific config</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="ассинхронный-config" tabindex="-1">Ассинхронный Config <a class="header-anchor" href="#ассинхронный-config" aria-hidden="true">#</a></h3><p>Если конфиг должен вызвать ассинхронную функцию, то вы можете экспортировать его (конфиг) как async function:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> command<span class="token punctuation">,</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// build specific config</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="общие-опции-дnя-server-и-build" tabindex="-1">Общие опции (для Server и Build) <a class="header-anchor" href="#общие-опции-дnя-server-и-build" aria-hidden="true">#</a></h2><h3 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>process.cwd()</code></p><p>Корневая директория проекта (где располагается <code>index.html</code>). Может быть абсолютным путём, или относительным к расположению где лежит сам конфиг файл.</p><p>Смотрите <a href="/guide/#index-html-and-project-root">Project Root</a> для большей информации.</p></li></ul><h3 id="base" tabindex="-1">base <a class="header-anchor" href="#base" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>/</code></p><p>Base public путь, когда сервер работает в development или production. Валидные значения:</p><ul><li>Абсолютный URL путь, например, <code>/foo/</code></li><li>Полный URL, например, <code>https://foo.com/</code></li><li>Пустая строка или <code>./</code> (для embedded deployment)</li></ul><p>Смотрите <a href="/guide/build.html#public-base-path">Public Base Path</a> для большей информации.</p></li></ul><h3 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>&#39;development&#39;</code> для serve, <code>&#39;production&#39;</code> для build</p><p>Указание этого параметра в конфиге перезапишет mode используемый по умолчанию в <strong>serve и build</strong>. Это значение также может быть перезаписано через параметр командной строки <code>--mode</code>.</p><p>Смотрите <a href="/guide/env-and-mode.html">Env Variables and Modes</a> для большей информации.</p></li></ul><h3 id="define" tabindex="-1">define <a class="header-anchor" href="#define" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>Record&lt;string, string&gt;</code></p><p>Определяет глоальную замену констант. Записи будут определяться как глобальные во время dev разработки и статически заменяться во время build.</p><ul><li><p>Начиная с версии <code>2.0.0-beta.70</code>, строковые значения спользуются как обычные выражениия (raw expressions), поэтому при определении строковой константы, её нужно явно написать в кавычках (например с <code>JSON.stringify</code>).</p></li><li><p>Замены выполняются только тогда, когда совпадение заключено в границы слова (word boundaries) (<code>\\b</code>).</p></li></ul><p>Поскольку он реализован как простая замена текста без какого-либо синтаксического анализа, мы рекомендуем использовать <code>define</code> только для CONSTANTS.</p><p>Например, <code>process.<wbr>env.FOO</code> и <code>__APP_VERSION__</code> хорошо подходят. Но <code>process</code> или <code>global</code> не следует использовать в этом случае. Вместо этого переменные могут быть поставлены (shimmed) или polyfilled.</p></li></ul><h3 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code> (Plugin | Plugin[])[]</code></p><p>Массив плагинов для использования. Falsy значения будут проигнорированы и массив плагинов будет выровнен (flattened). Смотрите <a href="/guide/api-plugin.html">Plugin API</a> для получения большей информации о Vite плагинах.</p></li></ul><h3 id="publicdir" tabindex="-1">publicDir <a class="header-anchor" href="#publicdir" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string | false</code></p></li><li><p><strong>Default:</strong> <code>&quot;public&quot;</code></p><p>Директория, из которой сёрвятся необрабатываемые статичные ресурсы (static assets). Файлы в этой директории сёрвятся через <code>/</code> во время dev разработки и копируются в корень <code>outDir</code> во время сборки (build), и всегда отдаются сервером или копируются как есть, без каких-либо трансформаций и изменений. Значение может быть или абсолютным системным путём (absolute file system path) или относительным к корню проекта (relative to project root).</p><p>Определение <code>publicDir</code> как <code>false</code> отключает этот функционал.</p><p>Смотрите <a href="/guide/assets.html#the-public-directory">The <code>public</code> Directory</a> для большей информации.</p></li></ul><h3 id="cachedir" tabindex="-1">cacheDir <a class="header-anchor" href="#cachedir" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>&quot;node_modules/.vite&quot;</code></p><p>Директория для сохранения кешированных файлов. Файлы в этой директории - это заранее собранные зависимости проекта (pre-bundled deps) или какие-нибудь другие закешированные файлы, сгенерированные с помощью vite, кеш которых, может повлиять на улучшение производительности. Вы можете использовать флаг <code>--force</code> или удалить директорию вручную чтобы перегенерировать кешируемые файлы. Значение может быть или абсолютным системным путём (absolute file system path) или относительным путём к корню проекта (path relative to project root).</p></li></ul><h3 id="resolve-alias" tabindex="-1">resolve.alias <a class="header-anchor" href="#resolve-alias" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong><code>Record&lt;string, string&gt; | Array&lt;{ find: string | RegExp, replacement: string }&gt;</code></p><p>Будет передано в <code>@rollup/plugin-alias</code> как его <a href="https://github.com/rollup/plugins/tree/master/packages/alias#entries" target="_blank" rel="noopener noreferrer">entries option</a>. Может быть объектом, или массивом пар <code>{ find, replacement }</code>.</p><p>Когда вы связываете (aliasing - делаете алиасы) к file system paths, всегда используйте абсолютные пути. Относительные alias значения будут использоваться как есть и не будут резолвнуты в file system paths.</p><p>Более продвинутое кастомное разрешение может быть найдено тут <a href="/guide/api-plugin.html">plugins</a>.</p></li></ul><h3 id="resolve-dedupe" tabindex="-1">resolve.dedupe <a class="header-anchor" href="#resolve-dedupe" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p><p>Если у вас есть дублированные копии одной и той же зависимости в вашем приложении (вероятно, из-за подъема или связанных пакетов в монорепозитории), используйте этот параметр, чтобы заставить Vite всегда резолвить перечисленные зависимости в одной и той же копии (из корня проекта).</p></li></ul><h3 id="resolve-conditions" tabindex="-1">resolve.conditions <a class="header-anchor" href="#resolve-conditions" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p><p>Дополнительные позволенные условия (allowed condiitons), когда резолвится <a href="https://nodejs.org/api/packages.html#packages_conditional_exports" target="_blank" rel="noopener noreferrer">Conditional Exports</a> из пакета.</p><p>Пакет с условным экспортом может иметь следующие <code>exports</code> поля в своём <code>package.json</code> файле:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.esm.js&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.cjs.js&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Здесь, <code>import</code> и <code>require</code> - &quot;conditions&quot; (условия). Conditions могут быть вложеными и следует указывать их от наиболее специфичных к наименее специфичным.</p><p>Vite имеет список &quot;allowed conditions&quot; (позволенных условий) и он будет искать первое соответствие, которое есть в позволенном списке (allowed list). Дефолтные позволенные условия (allowed conditions), следующие: <code>import</code>, <code>module</code>, <code>browser</code>, <code>default</code>, и <code>production/development</code> в соответствие с текущим используемым mode (режимом). <code>resolve.conditions</code> конфиг параметр позволяет указать дополнительные позволенные условия (allowed conditions).</p></li></ul><h3 id="resolve-mainfields" tabindex="-1">resolve.mainFields <a class="header-anchor" href="#resolve-mainfields" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p></li><li><p><strong>Default:</strong> <code>[&#39;module&#39;, &#39;jsnext:main&#39;, &#39;jsnext&#39;]</code></p><p>Список полей в <code>package.json</code>, которые будут использоваться чтобы отыскать входную точку в пакете (package&#39;s entry point). Обратите внимание, этот параметр имеет более низкий приоритет, чем условные экспорты, резолвнутые из поля <code>exports</code>: если любой entry point успешно найден из <code>exports</code>, то данное mainFields поле будет проигнорировано.</p></li></ul><h3 id="resolve-extensions" tabindex="-1">resolve.extensions <a class="header-anchor" href="#resolve-extensions" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p></li><li><p><strong>Default:</strong> <code>[&#39;.mjs&#39;, &#39;.js&#39;, &#39;.ts&#39;, &#39;.jsx&#39;, &#39;.tsx&#39;, &#39;.json&#39;]</code></p><p>Список расширений файлов, которые будут импортированы без расширений. Обратите внимание, <strong>НЕ НАДО</strong> исключать расширения для кастомных импортируемых типов (например, <code>.vue</code>) поскольку это может помешать вашей IDE и поддержке типов (type support).</p></li></ul><h3 id="css-modules" tabindex="-1">css.modules <a class="header-anchor" href="#css-modules" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong></p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">CSSModulesOptions</span> <span class="token punctuation">{</span>\n  scopeBehaviour<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;global&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;local&#39;</span>\n  globalModulePaths<span class="token operator">?</span><span class="token operator">:</span> RegExp<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  generateScopedName<span class="token operator">?</span><span class="token operator">:</span>\n    <span class="token operator">|</span> <span class="token builtin">string</span>\n    <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> css<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">)</span>\n  hashPrefix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">/**\n   * default: &#39;camelCaseOnly&#39;\n   */</span>\n  localsConvention<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;camelCase&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;camelCaseOnly&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;dashes&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;dashesOnly&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Настройка поведения CSS modules. Эти параметры передаются в <a href="https://github.com/css-modules/postcss-modules" target="_blank" rel="noopener noreferrer">postcss-modules</a>.</p></li></ul><h3 id="css-postcss" tabindex="-1">css.postcss <a class="header-anchor" href="#css-postcss" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string | (postcss.ProcessOptions &amp; { plugins?: postcss.Plugin[] })</code></p><p>Инлайн PostCSS конфиг (поле ожидает тот же формат, что и <code>postcss.config.js</code>), кастомный путь для поиска PostCSS конфиг файла (по умолчанию корень проекта). Поиск выполняется с помощью <a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noopener noreferrer">postcss-load-config</a>.</p><p>Заметьте, если предоставлен инлайновый кофиг, Vite не будет искать другие PostCSS config файлы.</p></li></ul><h3 id="css-preprocessoroptions" tabindex="-1">css.preprocessorOptions <a class="header-anchor" href="#css-preprocessoroptions" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>Record&lt;string, object&gt;</code></p><p>Укажите опции для передачи в CSS pre-processors. Пример:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  css<span class="token operator">:</span> <span class="token punctuation">{</span>\n    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      scss<span class="token operator">:</span> <span class="token punctuation">{</span>\n        additionalData<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$injectedColor: orange;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h3 id="json-namedexports" tabindex="-1">json.namedExports <a class="header-anchor" href="#json-namedexports" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>Поддерживать ли именованный импорт из файлов <code>.json</code>.</p></li></ul><h3 id="json-stringify" tabindex="-1">json.stringify <a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>false</code></p><p>Если установленно значение <code>true</code>, импортируемый JSON будет трансформирован в <code>export default JSON.parse(&quot;...&quot;)</code>, который значительно производительнее, чем Object literals, особенно когда JSON файл очень большой.</p><p>Поставив true, вы отключите именованный импорт (named import).</p></li></ul><h3 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>ESBuildOptions | false</code></p><p><code>ESBuildOptions</code> расширяет <a href="https://esbuild.github.io/api/#transform-api" target="_blank" rel="noopener noreferrer">ESbuild&#39;s собственные transform options</a>. Наиболее частый пример использования - это кастомизация JSX:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  esbuild<span class="token operator">:</span> <span class="token punctuation">{</span>\n    jsxFactory<span class="token operator">:</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span>\n    jsxFragment<span class="token operator">:</span> <span class="token string">&#39;Fragment&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>По умолчанию, ESBuild применяется к <code>ts</code>, <code>jsx</code> и <code>tsx</code> файлам. Вы можете кастомизировать это поведение с помощью <code>esbuild.include</code> и <code>esbuild.exclude</code>, оба эти параметра ожидают параметры следующих типов: <code>string | RegExp | (string | RegExp)[]</code>.</p><p>В дополнение, вы также можете использовать <code>esbuild.jsxInject</code> чтобы автоматически инжектить JSX helper imports для каждой трансформации файлов с помощью ESBuild:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  esbuild<span class="token operator">:</span> <span class="token punctuation">{</span>\n    jsxInject<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">import React from &#39;react&#39;</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Поставьте в значение <code>false</code> чтобы отключить ESbuild трансформации.</p></li></ul><h3 id="assetsinclude" tabindex="-1">assetsInclude <a class="header-anchor" href="#assetsinclude" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string | RegExp | (string | RegExp)[]</code></p></li><li><p><strong>Related:</strong> <a href="/guide/assets.html">Static Asset Handling</a></p><p>Укажите дополнительные типы файлов, которые будут считаться статичными ресурсами (static assets), и тогда:</p><ul><li><p>Эти файлы будут исключены из plugin transform pipeline когда на них ссылаются из HTML или напрямую запрашивают с помощью <code>fetch</code> или XHR.</p></li><li><p>Импортирование этих файлов из JS вернёт их резолвнутую URL строку (это поведение может быть перезаписано, если у вас есть <code>enforce: &#39;pre&#39;</code> плагин, чтобы обрабатывать типы ресурсов (asset type) по разному).</p></li></ul><p>Встроенные типы ресурсов (built-in asset type) перечислены <a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/constants.ts" target="_blank" rel="noopener noreferrer">здесь</a>.</p></li></ul><h3 id="loglevel" tabindex="-1">logLevel <a class="header-anchor" href="#loglevel" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>&#39;info&#39; | &#39;warn&#39; | &#39;error&#39; | &#39;silent&#39;</code></p><p>Отрегулируйте подробность вывода информации в консоль. Дефолтное значение - <code>&#39;info&#39;</code>.</p></li></ul><h3 id="clearscreen" tabindex="-1">clearScreen <a class="header-anchor" href="#clearscreen" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>Установите значение <code>false</code> чтобы Vite не очищал экран терминала, во время вывода определённых сообщений. Можно передать этот параметр через командную строку: <code>--clearScreen false</code>.</p></li></ul><h3 id="envdir" tabindex="-1">envDir <a class="header-anchor" href="#envdir" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>root</code></p><p>Директория из которой, загружаются файлы <code>.env</code>. Может быть абсолютным путём, или относительным путём к корню проекта.</p><p>Смотрите <a href="/guide/env-and-mode.html#env-files">это</a> для большей информации о файлах окружений (environment files).</p></li></ul><h3 id="envprefix" tabindex="-1">envPrefix <a class="header-anchor" href="#envprefix" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string | string[]</code></p></li><li><p><strong>Default:</strong> <code>VITE_</code></p><p>Env переменные начинающиеся с <code>envPrefix</code> будут переданы (expose) вашему клиентскому исходному коду через import.<wbr>meta.env.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">ЗАМЕТКИ БЕЗОПАСНОСТИ</p><ul><li><code>envPrefix</code> не следует устанавливать как <code>&#39;&#39;</code>, что приведёт к выводу всех ваших env переменных клиенту и может стать причиной утечки важной информации. Vite выведет ошибку, когда обнаружит <code>&#39;&#39;</code>.</li></ul></div><h2 id="server-options" tabindex="-1">Server Options <a class="header-anchor" href="#server-options" aria-hidden="true">#</a></h2><h3 id="server-host" tabindex="-1">server.host <a class="header-anchor" href="#server-host" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>&#39;127.0.0.1&#39;</code></p><p>Укажите какие IP адреса должен слушать сервер. Установите этот параметр в значение <code>0.0.0.0</code> чтобы слушать все адреса, включая LAN и public адреса.</p><p>Этот параметр может быть установлен через CLI с помощью<code>--host 0.0.0.0</code> или <code>--host</code>.</p></li></ul><h3 id="server-port" tabindex="-1">server.port <a class="header-anchor" href="#server-port" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>number</code></p><p>Укажите порт сервера. Обратите внимание, если порт уже используется, Vite автоматически попытается использовать следующий доступный порт, поэтому в конечном итоге это может быть не тот порт, который слушает сервер.</p></li></ul><h3 id="server-strictport" tabindex="-1">server.strictPort <a class="header-anchor" href="#server-strictport" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p><p>Задайте значение <code>true</code> чтобы завершать работу сервера, если нужный порт уже используется, и Vite не будет использовать следующий доступный порт.</p></li></ul><h3 id="server-https" tabindex="-1">server.https <a class="header-anchor" href="#server-https" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | https.ServerOptions</code></p><p>Активирует TLS + HTTP/2. Обратите внимание, этот переход на TLS осуществляется только тогда, когда также используется <a href="#server-proxy"><code>server.proxy</code> option</a>.</p><p>Значение также может быть представлено как <a href="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener" target="_blank" rel="noopener noreferrer">options object</a> переданный в <code>https.createServer()</code>.</p></li></ul><h3 id="server-open" tabindex="-1">server.open <a class="header-anchor" href="#server-open" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | string</code></p><p>Автоматически открывает ваше приложение во вкладке браузера при запуске сервера. Если значение - строка, то оно будет использовано как URL&#39;s pathname. Если вы хотите, чтобы приложение открывалось в указаном вами браузере, вы можете установить env переменную <code>process.<wbr>env.BROWSER</code> (например, <code>firefox</code>). Смотрите <a href="https://github.com/sindresorhus/open#app" target="_blank" rel="noopener noreferrer">the <code>open</code> package</a> для большей информации.</p><p><strong>Пример:</strong></p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  server<span class="token operator">:</span> <span class="token punctuation">{</span>\n    open<span class="token operator">:</span> <span class="token string">&#39;/docs/index.html&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h3 id="server-proxy" tabindex="-1">server.proxy <a class="header-anchor" href="#server-proxy" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>Record&lt;string, string | ProxyOptions&gt;</code></p><p>Настройте кастомные прокси правила для dev сервера. Данная опция ожидает объект с парами <code>{ key: options }</code>. Если ключ (key) начинается с <code>^</code>, то он будет интерпретирован как <code>RegExp</code> (регулярное выражение). Опция <code>configure</code> может использоваться для доступа к экземпляру proxy.</p><p>Используется <a href="https://github.com/http-party/node-http-proxy" target="_blank" rel="noopener noreferrer"><code>http-proxy</code></a>. Полный список опций доступен <a href="https://github.com/http-party/node-http-proxy#options" target="_blank" rel="noopener noreferrer">тут</a>.</p><p><strong>Пример:</strong></p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  server<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// string shorthand</span>\n      <span class="token string">&#39;/foo&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:4567&#39;</span><span class="token punctuation">,</span>\n      <span class="token comment">// с options</span>\n      <span class="token string">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        target<span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>\n        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// с регуляркой (RegEx)</span>\n      <span class="token string">&#39;^/fallback/.*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        target<span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>\n        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/fallback</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// использование proxy instance</span>\n      <span class="token string">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        target<span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>\n        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">configure</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">proxy<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// proxy будет экземпляром &#39;http-proxy&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h3 id="server-cors" tabindex="-1">server.cors <a class="header-anchor" href="#server-cors" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | CorsOptions</code></p><p>Настройте CORS для dev сервера. Эта опция активна по умолчанию и позволяет работать любому origin. Передайте <a href="https://github.com/expressjs/cors" target="_blank" rel="noopener noreferrer">options object</a> чтобы точно настроить повдеение CORS или укажите <code>false</code> чтобы отключить его.</p></li></ul><h3 id="server-force" tabindex="-1">server.force <a class="header-anchor" href="#server-force" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Связанный раздел:</strong> <a href="/guide/dep-pre-bundling.html">Dependency Pre-Bundling</a></p><p>Установите в значение <code>true</code> чтобы форсировать dependency pre-bundling (обязательно собрать зависимости).</p></li></ul><h3 id="server-hmr" tabindex="-1">server.hmr <a class="header-anchor" href="#server-hmr" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | { protocol?: string, host?: string, port?: number, path?: string, timeout?: number, overlay?: boolean, clientPort?: number, server?: Server }</code></p><p>Отключите или настройте HMR соединение (в случае когда HMR websocket должен использовать отличные от http server&#39;а адреса).</p><p>Установите <code>server.hmr.overlay</code> в значение <code>false</code> чтобы отключить server error overlay.</p><p><code>clientPort</code> - это продвинутая опция, которая перезаписывает порт только на стороне клиента, позволяя вам сёрвить websocket на другом порту, отличным от того, к которому обращается клиентский код. Полезно если вы используете SSL proxy перед своим dev сервером.</p><p>Когда используются <code>server.middlewareMode</code> и <code>server.https</code>, установка <code>server.hmr.server</code> для вашего HTTPS сервера будет обрабатывать HMR secure connection запросы через ваш сервер. Это может быть полезно когда используются самоподписанные (self-signed) сертификаты.</p></li></ul><h3 id="server-watch" tabindex="-1">server.watch <a class="header-anchor" href="#server-watch" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>object</code></p><p>File system watcher опции, которые передаются в <a href="https://github.com/paulmillr/chokidar#api" target="_blank" rel="noopener noreferrer">chokidar</a>.</p><p>Когда Vite запускается в Windows Subsystem для Linux (WSL) 2, папка проекта находится в файловой системе Windows, вам нужно будет установить этот параметр <code>{ usePolling: true }</code>. Это из-за <a href="https://github.com/microsoft/WSL/issues/4739" target="_blank" rel="noopener noreferrer">WSL2 ограничений</a> с файловой системой Windows.</p></li></ul><h3 id="server-middlewaremode" tabindex="-1">server.middlewareMode <a class="header-anchor" href="#server-middlewaremode" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>&#39;ssr&#39; | &#39;html&#39;</code></p><p>Создайте Vite сервер в middleware mode (режиме). (без HTTP сервера)</p><ul><li><code>&#39;ssr&#39;</code> отключит собственную логику HTML сёрвинга Vite&#39;а и вы должны будете сёрвить <code>index.html</code> самостоятельно.</li><li><code>&#39;html&#39;</code> включит собственную логику HTML сёрвинга Vite.</li></ul></li><li><p><strong>Свзяанный раздел:</strong> <a href="/guide/ssr.html#setting-up-the-dev-server">SSR - Настройка Dev сервера</a></p></li><li><p><strong>Пример:</strong></p></li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createServer<span class="token operator">:</span> createViteServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Создаём Vite сервер в middleware mode (режиме).</span>\n  <span class="token keyword">const</span> vite <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createViteServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    server<span class="token operator">:</span> <span class="token punctuation">{</span> middlewareMode<span class="token operator">:</span> <span class="token string">&#39;ssr&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// Используем vite&#39;s connect instance как middleware</span>\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vite<span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span>\n\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Если `middlewareMode` - это `&#39;ssr&#39;`, то сёрвим `index.html` тут.</span>\n    <span class="token comment">// Если `middlewareMode` - это `&#39;html&#39;`, то не нужно сёрвить `index.html`</span>\n    <span class="token comment">// потому что Vite сделает это за нас.</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="server-fs-strict" tabindex="-1">server.fs.strict <a class="header-anchor" href="#server-fs-strict" aria-hidden="true">#</a></h3><ul><li><p><strong>Экспереминтальная фича</strong></p></li><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>false</code> (будет заменено на <code>true</code> в будущих версиях)</p><p>Ограничьте сёрвинг файлов вне рабочей директории.</p></li></ul><h3 id="server-fs-allow" tabindex="-1">server.fs.allow <a class="header-anchor" href="#server-fs-allow" aria-hidden="true">#</a></h3><ul><li><p><strong>Экспереминтальная фича</strong></p></li><li><p><strong>Type:</strong> <code>string[]</code></p><p>Ограничьте файлы, которые будут сёрвиться через <code>/@fs/</code>. Когда <code>server.fs.strict</code> поставленно в значение<code>true</code>, доступ к файлам вне этого списка директорий вернёт 403 ошибку.</p><p>Vite будет искать корень для потенциального workspace и использовать его по умолчанию. Валидный workspace соответствует следующим условиям, в противном случае будет выполнено переключение на корень проекта <a href="/guide/#index-html-and-project-root">project root</a>.</p><ul><li>содержит <code>workspaces</code> поле в <code>package.json</code></li><li>содержит один из следующих файлов <ul><li><code>pnpm-workspace.yaml</code></li></ul></li></ul><p>Принимает путь, чтобы указать кастомный workspace корень. Может быть абсолютным путём или относительным от корня проекта <a href="/guide/#index-html-and-project-root">project root</a>. Например:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  server<span class="token operator">:</span> <span class="token punctuation">{</span>\n    fs<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Позволяет сёрвить файлы из директории выше над корнем проекта</span>\n      allow<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><h2 id="build-options" tabindex="-1">Build Options <a class="header-anchor" href="#build-options" aria-hidden="true">#</a></h2><h3 id="build-target" tabindex="-1">build.target <a class="header-anchor" href="#build-target" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string | string[]</code></p></li><li><p><strong>Default:</strong> <code>&#39;modules&#39;</code></p></li><li><p><strong>Связанный раздел:</strong> <a href="/guide/build.html#browser-compatibility">Browser Compatibility</a></p><p>Target браузерной поддержки для финального бандла. Дефолтное значение - специально Vite значение, <code>&#39;modules&#39;</code>, которое таргетируется на <a href="https://caniuse.com/es6-module" target="_blank" rel="noopener noreferrer">браузеры с нативной поддержкой ES модулей</a>.</p><p>Другое специальное значение - <code>&#39;esnext&#39;</code> - что подразумевает поддержку нативных динамических импортов и будет транспилироваться на столько меньше, на сколкьо это возможно:</p><ul><li>Если <a href="#build-minify"><code>build.minify</code></a> параметр - <code>&#39;terser&#39;</code> (как по умолчанию), <code>&#39;esnext&#39;</code> будет вынужден перейти на <code>&#39;es2019&#39;</code>.</li><li>В других случаях, транспиляция вообще не будет выполняться.</li></ul><p>Трансформация выполняется с помощью esbuild и значение парметра должно быть валидной <a href="https://esbuild.github.io/api/#target" target="_blank" rel="noopener noreferrer">esbuild target опцией</a>. Кастомные могут быть указаны, как ES версии (например, <code>es2015</code>), браузеры определённой версии (например, <code>chrome58</code>), или массив множества разных target строк.</p><p>Обратите внимание, сборка завершится ошибкой, если код содержит фичи, которые нельзя безопасно транспилировать с помощью esbuild. Смотрите <a href="https://esbuild.github.io/content-types/#javascript" target="_blank" rel="noopener noreferrer">esbuild документацию</a> для большей иформации.</p></li></ul><h3 id="build-polyfillmodulepreload" tabindex="-1">build.polyfillModulePreload <a class="header-anchor" href="#build-polyfillmodulepreload" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>Следуют ли автоматически инжектить <a href="https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill" target="_blank" rel="noopener noreferrer">module preload polyfill</a>.</p><p>Если установлено в значение <code>true</code>, polyfill автоматически встраивается в proxy модуль каждого <code>index.html</code> entry. Если сборка настроена на использование non-html кастомного entry через <code>build.rollupOptions.input</code>, то необходимо вручную импортировать polyfill в ваш кастомный entry:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;vite/modulepreload-polyfill&#39;</span>\n</code></pre></div><p>Обратите внимание: polyfill <strong>НЕ</strong> приминяется к <a href="/guide/build.html#library-mode">Library Mode</a>. Если вам нужна поддержка браузеров без нативного динамического импорта (dynamic import), вам вероятно следует избегать использования этого в вашей библиотеке.</p></li></ul><h3 id="build-outdir" tabindex="-1">build.outDir <a class="header-anchor" href="#build-outdir" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>dist</code></p><p>Укажите output директорию (относительно <a href="/guide/#index-html-and-project-root">project root</a>).</p></li></ul><h3 id="build-assetsdir" tabindex="-1">build.assetsDir <a class="header-anchor" href="#build-assetsdir" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string</code></p></li><li><p><strong>Default:</strong> <code>assets</code></p><p>Укажите директорию для вложения сгенерированных ресурсов (assets) (относительно <code>build.outDir</code>).</p></li></ul><h3 id="build-assetsinlinelimit" tabindex="-1">build.assetsInlineLimit <a class="header-anchor" href="#build-assetsinlinelimit" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>number</code></p></li><li><p><strong>Default:</strong> <code>4096</code> (4kb)</p><p>Импортированные или ресрусы, на которые есть ссылки, размер которых меньше, чем указанный в этом параметре порог, будут вставлены инлайном как base64 URL чтобы избежать лишних http запросов. Поставьте в значение <code>0</code> чтобы отключить инлайновую вставку ресурсов совсем.</p><div class="tip custom-block"><p class="custom-block-title">Заметка</p><p>Если вы укажите <code>build.lib</code>, то <code>build.assetsInlineLimit</code> будет игнорироваться и ресурсы (assets) всегда будут вставлены инлайном, независимо от размера файлов.</p></div></li></ul><h3 id="build-csscodesplit" tabindex="-1">build.cssCodeSplit <a class="header-anchor" href="#build-csscodesplit" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>Включить/отключить CSS code splitting (разделение CSS кода на файлы). Когда включено, CSS импортируемый в async chunks будет вставлен инлайном в этот же async chunk и вставляется когда chunk загружен.</p><p>Если отключено, все CSS во всём проекте будут извлечены в один CSS файл.</p></li></ul><h3 id="build-sourcemap" tabindex="-1">build.sourcemap <a class="header-anchor" href="#build-sourcemap" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | &#39;inline&#39; | &#39;hidden&#39;</code></p></li><li><p><strong>Default:</strong> <code>false</code></p><p>Генерирует production source maps. Если значение <code>true</code>, то будет создан отдельный sourcemap. Если <code>&#39;inline&#39;</code>, то sourcemap будет добавлен в финальный output файл как data URI. <code>&#39;hidden&#39;</code> работает как <code>true</code> за исключением того, что соответствующие sourcemap комментарии в собранных файлах удалены.</p></li></ul><h3 id="build-rollupoptions" tabindex="-1">build.rollupOptions <a class="header-anchor" href="#build-rollupoptions" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <a href="https://rollupjs.org/guide/en/#big-list-of-options" target="_blank" rel="noopener noreferrer"><code>RollupOptions</code></a></p><p>Напрямую кастомизируйте основные настройки Rollup сборки. Это то же самое, что и опции, которые могут быть экспортированы из Rollup конфиг файла и они будут смёржены с Vite&#39;s внутренними Rollup опциями. Смотрите <a href="https://rollupjs.org/guide/en/#big-list-of-options" target="_blank" rel="noopener noreferrer">Rollup options документацию</a> для большей информации.</p></li></ul><h3 id="build-commonjsoptions" tabindex="-1">build.commonjsOptions <a class="header-anchor" href="#build-commonjsoptions" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs#options" target="_blank" rel="noopener noreferrer"><code>RollupCommonJSOptions</code></a></p><p>Опции, которые передаются в <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noopener noreferrer">@rollup/plugin-commonjs</a>.</p></li></ul><h3 id="build-dynamicimportvarsoptions" tabindex="-1">build.dynamicImportVarsOptions <a class="header-anchor" href="#build-dynamicimportvarsoptions" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <a href="https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#options" target="_blank" rel="noopener noreferrer"><code>RollupDynamicImportVarsOptions</code></a></p><p>Опции, которые передаются в <a href="https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars" target="_blank" rel="noopener noreferrer">@rollup/plugin-dynamic-import-vars</a>.</p></li></ul><h3 id="build-lib" tabindex="-1">build.lib <a class="header-anchor" href="#build-lib" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>{ entry: string, name?: string, formats?: (&#39;es&#39; | &#39;cjs&#39; | &#39;umd&#39; | &#39;iife&#39;)[], fileName?: string | ((format: ModuleFormat) =&gt; string) }</code></p></li><li><p><strong>Связанный раздел:</strong> <a href="/guide/build.html#library-mode">Library Mode</a></p><p>Сборка как library (библиотека). <code>entry</code> - обязателен, поскольку library не может использовать HTML как entry. <code>name</code> - это открытая глобальная переменная и она обязательна, когда <code>formats</code> включает <code>&#39;umd&#39;</code> или <code>&#39;iife&#39;</code>. Дефолтные <code>formats</code> - это <code>[&#39;es&#39;, &#39;umd&#39;]</code>. <code>fileName</code> - это название package file output, по умолчанию <code>fileName</code> - это name option из package.json, этот параметр также может быть определён как функция, принимающая <code>format</code> как аргумент.</p></li></ul><h3 id="build-manifest" tabindex="-1">build.manifest <a class="header-anchor" href="#build-manifest" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>false</code></p></li><li><p><strong>Связанный раздел:</strong> <a href="/guide/backend-integration.html">Backend Integration</a></p><p>Когда установлено в значение <code>true</code>, сборка будет генерировать <code>manifest.json</code> файл, который содержит mapping нехешированных имён ресурсов (assets) к их хешированным версиям, который в дальнейшем может быть использован серверным фреймворком чтобы срендерить корректные ссылки на ресурсы (assets).</p></li></ul><h3 id="build-minify" tabindex="-1">build.minify <a class="header-anchor" href="#build-minify" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean | &#39;terser&#39; | &#39;esbuild&#39;</code></p></li><li><p><strong>Default:</strong> <code>&#39;terser&#39;</code></p><p>Установите в значение <code>false</code> чтобы отключить минификацию, или укажите minifier, который хотите использовать. Дефолтный - <a href="https://github.com/terser/terser" target="_blank" rel="noopener noreferrer">Terser</a>, он медленее, но в большинстве случаев предоставляет меньшие бандлы. Esbuild минификация значительно быстрее, но в конечном итоге создаёт значительно больше бандлов.</p></li></ul><h3 id="build-terseroptions" tabindex="-1">build.terserOptions <a class="header-anchor" href="#build-terseroptions" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>TerserOptions</code></p><p>Дополнительные <a href="https://terser.org/docs/api-reference#minify-options" target="_blank" rel="noopener noreferrer">minify опции</a>, которые передаются в Terser.</p></li></ul><h3 id="build-write" tabindex="-1">build.write <a class="header-anchor" href="#build-write" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>Поставьте значение <code>false</code> чтобы запретить запись бандла на диск. Это часто используется в <a href="/guide/api-javascript.html#build">программные <code>build()</code> вызовы</a>, где дальнейший пост процессинг бандла необходим до записи на диск.</p></li></ul><h3 id="build-emptyoutdir" tabindex="-1">build.emptyOutDir <a class="header-anchor" href="#build-emptyoutdir" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code> if <code>outDir</code> is inside <code>root</code></p><p>По умолчанию, Vite будет очищать <code>outDir</code> при сборке build, если он внутри корня проекта. Выведет ошибку если <code>outDir</code> находится вне рутовой директории, чтобы избеать случайного удаления важных файлов. Вы можете явно указать этот параметр чтобы отключить warning&#39;и. Это также можно сдлеать с помощью параметра командной строки <code>--emptyOutDir</code>.</p></li></ul><h3 id="build-brotlisize" tabindex="-1">build.brotliSize <a class="header-anchor" href="#build-brotlisize" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>true</code></p><p>Активирует/деактивирует brotli-compressed size reporting (отчёт о размере файлов). Сжатие больших output файлов может быть медленным, поэтому отключение этой опции может увеличить производительность сборки для больших проектов.</p></li></ul><h3 id="build-chunksizewarninglimit" tabindex="-1">build.chunkSizeWarningLimit <a class="header-anchor" href="#build-chunksizewarninglimit" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>number</code></p></li><li><p><strong>Default:</strong> <code>500</code></p><p>Ограничение для chunk size warnings (варнинги о больших размерах файлов) (в kbs).</p></li></ul><h3 id="build-watch" tabindex="-1">build.watch <a class="header-anchor" href="#build-watch" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <a href="https://rollupjs.org/guide/en/#watch-options" target="_blank" rel="noopener noreferrer"><code>WatcherOptions</code></a><code>| null</code></p></li><li><p><strong>Default:</strong> <code>null</code></p><p>Установите в значение <code>{}</code> чтобы активировать rollup watcher. Это часто используется в случаях, когда используются build-only плагины или для интеграционных процессов.</p></li></ul><h2 id="dep-optimization-options" tabindex="-1">Dep Optimization Options <a class="header-anchor" href="#dep-optimization-options" aria-hidden="true">#</a></h2><ul><li><strong>Связанный раздел:</strong> <a href="/guide/dep-pre-bundling.html">Dependency Pre-Bundling</a></li></ul><h3 id="optimizedeps-entries" tabindex="-1">optimizeDeps.entries <a class="header-anchor" href="#optimizedeps-entries" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string | string[]</code></p><p>По умолчанию, Vite будет искать ваш index.html файл, чтобы определить зависимости, которые нужно предсобрать (pre-bundled). Если build.rollupOptions.input указан, тогда Vite будет искать эти entry points.</p><p>Если ни одно из этих не подходит под ваши нужды, вы можете указать кастомные entries используя эту опцию - значение должно быть в формате <a href="https://github.com/mrmlnc/fast-glob#basic-syntax" target="_blank" rel="noopener noreferrer">fast-glob pattern</a> или массив паттернов, которые относительны к Vite корню проекта. Это перезапишет дефолтные entries.</p></li></ul><h3 id="optimizedeps-exclude" tabindex="-1">optimizeDeps.exclude <a class="header-anchor" href="#optimizedeps-exclude" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p><p>Зависимости, которые нужно исключить из pre-bundling.</p><div class="warning custom-block"><p class="custom-block-title">CommonJS</p><p>CommonJS зависимости не должны быть исключены из оптимизации. Если ESM зависимость исключена из оптимизации, но у неё есть вложенная CommonJS зависимость, то CommonJS зависимость должна быть добавлена в <code>optimizeDeps.include</code>. Пример:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  optimizeDeps<span class="token operator">:</span> <span class="token punctuation">{</span>\n    include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;esm-dep &gt; cjs-dep&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></div></li></ul><h3 id="optimizedeps-include" tabindex="-1">optimizeDeps.include <a class="header-anchor" href="#optimizedeps-include" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p><p>По умолчанию, залинкованные пакеты в <code>node_modules</code> не pre-bundled (предсобираются). Используйте этот параметр, чтобы в обязательно порядке предсобрать (pre-bundled) залинкованные пакеты.</p></li></ul><h3 id="optimizedeps-keepnames" tabindex="-1">optimizeDeps.keepNames <a class="header-anchor" href="#optimizedeps-keepnames" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>boolean</code></p></li><li><p><strong>Default:</strong> <code>false</code></p><p>Иногда бандлеру нужно переименовать symbols, чтобы избежать коллизий. Поставьте этот параметр в значение <code>true</code> чтобы сохранить свойство <code>name</code> в функциях и классах. Смотрите <a href="https://esbuild.github.io/api/#keep-names" target="_blank" rel="noopener noreferrer"><code>keepNames</code></a>.</p></li></ul><h2 id="ssr-options" tabindex="-1">SSR Options <a class="header-anchor" href="#ssr-options" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">Экспериментальная опция</p><p>SSR опции могут быть изменены в следующих минорных релизах (minor releases).</p></div><ul><li><strong>Связанный раздел:</strong> <a href="/guide/ssr.html#ssr-externals">SSR Externals</a></li></ul><h3 id="ssr-external" tabindex="-1">ssr.external <a class="header-anchor" href="#ssr-external" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string[]</code></p><p>Принудительно экстернализируйте зависимости для SSR.</p></li></ul><h3 id="ssr-noexternal" tabindex="-1">ssr.noExternal <a class="header-anchor" href="#ssr-noexternal" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>string | RegExp | (string | RegExp)[] | true</code></p><p>Предотвратить экстернализацию перечисленных зависимостей для SSR. Если <code>true</code>, то никакие зависимости не экстернализируются.</p></li></ul><h3 id="ssr-target" tabindex="-1">ssr.target <a class="header-anchor" href="#ssr-target" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>&#39;node&#39; | &#39;webworker&#39;</code></p></li><li><p><strong>Default:</strong> <code>node</code></p><p>Target сборки для SSR сервера.</p></li></ul>',155)];o.render=function(n,a,o,p,r,l){return e(),s("div",null,t)};export{a as __pageData,o as default};
