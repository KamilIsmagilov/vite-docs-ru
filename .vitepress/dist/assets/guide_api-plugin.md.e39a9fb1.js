import{o as n,c as s,d as a}from"./app.877e1a61.js";const t='{"title":"Plugin API","description":"","frontmatter":{},"headers":[{"level":2,"title":"Соглашения","slug":"согnашения"},{"level":2,"title":"Plugins config","slug":"plugins-config"},{"level":2,"title":"Простые примеры","slug":"простые-примеры"},{"level":3,"title":"Importing a Virtual File","slug":"importing-a-virtual-file"},{"level":3,"title":"Трансформирование Custom File Types","slug":"трансформирование-custom-file-types"},{"level":2,"title":"Universal Hooks","slug":"universal-hooks"},{"level":2,"title":"Vite Specific Hooks","slug":"vite-specific-hooks"},{"level":3,"title":"config","slug":"config"},{"level":3,"title":"configResolved","slug":"configresolved"},{"level":3,"title":"configureServer","slug":"configureserver"},{"level":3,"title":"transformIndexHtml","slug":"transformindexhtml"},{"level":3,"title":"handleHotUpdate","slug":"handlehotupdate"},{"level":2,"title":"Порядок применения плагинов","slug":"порядок-применения-пnагинов"},{"level":2,"title":"Условное применение","slug":"усnовное-применение"},{"level":2,"title":"Совместимость с Rollup плагинами","slug":"совместимость-с-rollup-пnагинами"},{"level":2,"title":"Нормализация путей","slug":"нормаnизация-путей"}],"relativePath":"guide/api-plugin.md","lastUpdated":1631747914625}',p={},e=[a('<h1 id="plugin-api" tabindex="-1">Plugin API <a class="header-anchor" href="#plugin-api" aria-hidden="true">#</a></h1><p>Vite плагины расширяют хорошо спроектированный интерфейс плагинов Rollup с некоторыми дополнительными Vite-specific опциями. Поэтому, вы можете один раз написать Vite плагин и он будет работать и в dev и в build.</p><p><strong>Рекомендуется сначала прочитать <a href="https://rollupjs.org/guide/en/#plugin-development" target="_blank" rel="noopener noreferrer">Rollup&#39;s plugin documentation</a> прежде чем продолжать чтение этой секции.</strong></p><h2 id="согnашения" tabindex="-1">Соглашения <a class="header-anchor" href="#согnашения" aria-hidden="true">#</a></h2><p>Если плагин не использует Vite specific hooks и может быть реализован как <a href="#rollup-plugin-compatibility">Compatible Rollup Plugin</a>, то мы рекомендуем использовать <a href="https://rollupjs.org/guide/en/#conventions" target="_blank" rel="noopener noreferrer">Rollup Plugin naming conventions</a></p><ul><li>Rollup плагины должны иметь понятное имя с префиксом <code>rollup-plugin-</code>.</li><li>Включать <code>rollup-plugin</code> и <code>vite-plugin</code> ключевые слова в package.json.</li></ul><p>Это также позволяет использовать плагин в чистом Rollup или WMR based проектах</p><p>Для плагинов только для Vite</p><ul><li>Vite плагины должны иметь понятное имя с префиксом <code>vite-plugin-</code>.</li><li>Включать <code>vite-plugin</code> ключевое слово в package.json.</li><li>Иметь раздел документации плагина, детально описывающий почему этот плагин только для Vite (например, плагин использует Vite specific plugin hooks).</li></ul><p>Если ваш плагин будет работать только с конкретным фреймворком, то название плагина должно включать в себя часть с префиксом этого фреймворка</p><ul><li><code>vite-plugin-vue-</code> префикс для Vue плагинов</li><li><code>vite-plugin-react-</code> префикс для React плагинов</li><li><code>vite-plugin-svelte-</code> префикс для Svelte плагинов</li></ul><h2 id="plugins-config" tabindex="-1">Plugins config <a class="header-anchor" href="#plugins-config" aria-hidden="true">#</a></h2><p>Пользователи будут добавлять плагины в<code>devDependencies</code> проекта и настраивать их используя <code>plugins</code> array option.</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> vitePlugin <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-feature&#39;</span>\n<span class="token keyword">import</span> rollupPlugin <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-feature&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vitePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rollupPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Falsy плагины будут игнорированы, что может быть использовано для лёгкой активации и деактивации плагинов.</p><p><code>plugins</code> также принимает preset&#39;ы включающие несколько плагинов как один элемент. Это полезно для сложных фич (таких, как интеграция фреймворков), которая реализуется используя несколько плагинов. Массив будет внутренне &quot;flattened&quot; выровнен (элементы на одном уровне, без вложенности).</p><div class="language-js"><pre><code><span class="token comment">// framework-plugin</span>\n<span class="token keyword">import</span> frameworkRefresh <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-framework-refresh&#39;</span>\n<span class="token keyword">import</span> frameworkDevtools <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-framework-devtools&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">framework</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">frameworkRefresh</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">frameworkDevTools</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n<span class="token keyword">import</span> framework <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-framework&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">framework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="простые-примеры" tabindex="-1">Простые примеры <a class="header-anchor" href="#простые-примеры" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">Подсказка</p><p>Общепринятым является создание Vite/Rollup плагина как factory function &quot;функция фабрика&quot;, которая возвращает актуальный объект плагина. Функция может принимать параметры, которые позволяют пользователям кастомизировать поведение плагина.</p></div><h3 id="importing-a-virtual-file" tabindex="-1">Importing a Virtual File <a class="header-anchor" href="#importing-a-virtual-file" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> virtualFileId <span class="token operator">=</span> <span class="token string">&#39;@my-virtual-file&#39;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;my-plugin&#39;</span><span class="token punctuation">,</span> <span class="token comment">// обязательно, будет показано при warnings и errors</span>\n    <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> virtualFileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> virtualFileId\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> virtualFileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">export const msg = &quot;from virtual file&quot;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Это позволяет нам импортировать файл в JavaScript:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@my-virtual-file&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n</code></pre></div><h3 id="трансформирование-custom-file-types" tabindex="-1">Трансформирование Custom File Types <a class="header-anchor" href="#трансформирование-custom-file-types" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">const</span> fileRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(my-file-ext)$</span><span class="token regex-delimiter">/</span></span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;transform-file&#39;</span><span class="token punctuation">,</span>\n\n    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>fileRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          code<span class="token operator">:</span> <span class="token function">compileFileToJS</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          map<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// provide source map if available</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="universal-hooks" tabindex="-1">Universal Hooks <a class="header-anchor" href="#universal-hooks" aria-hidden="true">#</a></h2><p>В процессе разработки, Vite dtv сервер создаёт плагин контейнер, который вызывает <a href="https://rollupjs.org/guide/en/#build-hooks" target="_blank" rel="noopener noreferrer">Rollup Build Hooks</a> Rollup делает это тем же способом.</p><p>Следующие hooks (хуки) вызываются один раз при запуске сервера:</p><ul><li><a href="https://rollupjs.org/guide/en/#options" target="_blank" rel="noopener noreferrer"><code>options</code></a></li><li><a href="https://rollupjs.org/guide/en/#buildstart" target="_blank" rel="noopener noreferrer"><code>buildStart</code></a></li></ul><p>Следующие hooks (хуки) вызываются при каждом входящем запросе модуля:</p><ul><li><a href="https://rollupjs.org/guide/en/#resolveid" target="_blank" rel="noopener noreferrer"><code>resolveId</code></a></li><li><a href="https://rollupjs.org/guide/en/#load" target="_blank" rel="noopener noreferrer"><code>load</code></a></li><li><a href="https://rollupjs.org/guide/en/#transform" target="_blank" rel="noopener noreferrer"><code>transform</code></a></li></ul><p>Следующие hooks (хуки) вызываются когда сервер потушен:</p><ul><li><a href="https://rollupjs.org/guide/en/#buildend" target="_blank" rel="noopener noreferrer"><code>buildEnd</code></a></li><li><a href="https://rollupjs.org/guide/en/#closebundle" target="_blank" rel="noopener noreferrer"><code>closeBundle</code></a></li></ul><p>Обратите внимание, что <a href="https://rollupjs.org/guide/en/#moduleparsed" target="_blank" rel="noopener noreferrer"><code>moduleParsed</code></a> hook <strong>НЕ</strong> вызывается во время dev, потому что Vite избегает полного парсинга AST для улучшения производительности.</p><p><a href="https://rollupjs.org/guide/en/#output-generation-hooks" target="_blank" rel="noopener noreferrer">Output Generation Hooks</a> (кроме <code>closeBundle</code>) <strong>НЕ</strong> вызываются во время dev. Вы можете думать, что Vite&#39;s dev сервер вызывает только <code>rollup.rollup()</code> без вызова <code>bundle.generate()</code>.</p><h2 id="vite-specific-hooks" tabindex="-1">Vite Specific Hooks <a class="header-anchor" href="#vite-specific-hooks" aria-hidden="true">#</a></h2><p>Vite плагины также могу предоставлять хуки, которые служат Vite-specific целям. Rollup игнорирует эти хуки.</p><h3 id="config" tabindex="-1"><code>config</code> <a class="header-anchor" href="#config" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>(config: UserConfig, env: { mode: string, command: string }) =&gt; UserConfig | null | void</code></p></li><li><p><strong>Kind:</strong> <code>async</code>, <code>sequential</code></p><p>Изменяет конфигурацию Vite, прежде чем она будет резолвнута. Хук получает необработанный config (CLI option смёрдженные с конфиг файлом) и текущую конфигурацию env, которая exposes используемые <code>mode</code> и <code>command</code>. Можете вернуть частичный объект конфига, который будет глубоко смёрджен (deeply merged) с существующей конфигурацией или напрямую изменить congif (если дефолтный merging не может достичь желаемого результата).</p><p><strong>Пример:</strong></p><div class="language-js"><pre><code><span class="token comment">// вернуть частичный конфиг (рекомендуется)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">partialConfigPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;return-partial&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">config</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// напрямую изменить конфиг (используйте только когда merging не работает)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mutateConfigPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;mutate-config&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> <span class="token punctuation">{</span> command <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      config<span class="token punctuation">.</span>root <span class="token operator">=</span> __dirname\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">Заметка</p><p>Плагины пользователей резолвятся до запуска этого хука, поэтому встраивание (injecting) других плагинов внутри <code>config</code> хука не приведёт ни к каким результатам.</p></div></li></ul><h3 id="configresolved" tabindex="-1"><code>configResolved</code> <a class="header-anchor" href="#configresolved" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>(config: ResolvedConfig) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p><strong>Kind:</strong> <code>async</code>, <code>parallel</code></p><p>Вызывается после того, как Vite config резолвнется. Используйте этот хук, чтобы прочитать и сохранить финальный резолвнутый конфиг. Это также полезно, когда плагину нужно сделать что-нибудь другое в зависимости от выполняемой команды.</p><p><strong>Пример:</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">examplePlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> config\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;read-config&#39;</span><span class="token punctuation">,</span>\n\n    <span class="token function">configResolved</span><span class="token punctuation">(</span><span class="token parameter">resolvedConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// сохранить резолвнутый (resolved) config</span>\n      config <span class="token operator">=</span> resolvedConfig\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// потом можно использовать сохранённый store в других хуках</span>\n    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// serve: plugin invoked by dev server</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// build: plugin invoked by Rollup</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="configureserver" tabindex="-1"><code>configureServer</code> <a class="header-anchor" href="#configureserver" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>(server: ViteDevServer) =&gt; (() =&gt; void) | void | Promise&lt;(() =&gt; void) | void&gt;</code></p></li><li><p><strong>Kind:</strong> <code>async</code>, <code>sequential</code></p></li><li><p><strong>Читайте также:</strong> <a href="./api-javascript.html#vitedevserver">ViteDevServer</a></p><p>Хук для настройки (конфигурирования) dev сервера. Самый популярный случай использования - это добавление кастомноых middlewares во внутренний <a href="https://github.com/senchalabs/connect" target="_blank" rel="noopener noreferrer">connect</a> app:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;configure-server&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">configureServer</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    server<span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// custom handle request...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Injecting Post Middleware</strong></p><p><code>configureServer</code> хук вызывается до того, как внутренние middlewares установлены, поэтому кастомные middlewares будут запущены до internal middlewares по умолчанию. Если вы хотите заинжектить middleware <strong>после</strong> internal middlewares, вы можете вернуть функцию из <code>configureServer</code>, которая будет вызвана после того, как internal middlewares будут установлены:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;configure-server&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">configureServer</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// возвращаем post hook, который вызовется после того, как</span>\n    <span class="token comment">// internal middlewares будут установлены</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      server<span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// custom handle request...</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Storing Server Access</strong></p><p>В некоторых случаях, другим хукам плагина могут понадобиться доступы до экземпляра dev сервера (например, доступ до web socket server, the file system watcher, или the module graph). Этот хук может быть использован для сохранения экземпляра сервера, чтобы потом обращаться к этому экземпляру из других хуков:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> server\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;configure-server&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">configureServer</span><span class="token punctuation">(</span><span class="token parameter">_server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      server <span class="token operator">=</span> _server\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// use server...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Заметьте, <code>configureServer</code> не вызывается когда запущен production build, поэтому другим вашим хукам необходимо подготовиться к этому, к отсутствию этого хука.</p></li></ul><h3 id="transformindexhtml" tabindex="-1"><code>transformIndexHtml</code> <a class="header-anchor" href="#transformindexhtml" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>IndexHtmlTransformHook | { enforce?: &#39;pre&#39; | &#39;post&#39; transform: IndexHtmlTransformHook }</code></p></li><li><p><strong>Kind:</strong> <code>async</code>, <code>sequential</code></p><p>Выделенный хук для трансформирования <code>index.html</code>. Этот хук получает текущую HTML строку и transform context. Context предоставляет <a href="./api-javascript.html#vitedevserver"><code>ViteDevServer</code></a> экземпляр во время dev (разработки) и output Rollup bundle для build.</p><p>Этот хук может быть асинхронным и может возвращать одно из следующих значений:</p><ul><li>Трансформированную HTML строку</li><li>Array of tag descriptor objects (<code>{ tag, attrs, children }</code>) , чтобы встроить их в существующий HTML. Каждый тег также может указать куда ему следует инжектиться (по умолчанию добавляется в <code>&lt;head&gt;</code>)</li><li>Объект содержащий <code>{ html, tags }</code></li></ul><p><strong>Базовый пример:</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">htmlPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;html-transform&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;title&gt;(.*?)&lt;\\/title&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;title&gt;Title replaced!&lt;/title&gt;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>Full Hook Signature (полная сигнатура хука):</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">IndexHtmlTransformHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  ctx<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token builtin">string</span>\n    filename<span class="token operator">:</span> <span class="token builtin">string</span>\n    server<span class="token operator">?</span><span class="token operator">:</span> ViteDevServer\n    bundle<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OutputBundle\n    chunk<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OutputChunk\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token operator">|</span> IndexHtmlTransformResult\n  <span class="token operator">|</span> <span class="token keyword">void</span>\n  <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IndexHtmlTransformResult <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">IndexHtmlTransformResult</span> <span class="token operator">=</span>\n  <span class="token operator">|</span> <span class="token builtin">string</span>\n  <span class="token operator">|</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      html<span class="token operator">:</span> <span class="token builtin">string</span>\n      tags<span class="token operator">:</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">HtmlTagDescriptor</span> <span class="token punctuation">{</span>\n  tag<span class="token operator">:</span> <span class="token builtin">string</span>\n  attrs<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token comment">/**\n   * default: &#39;head-prepend&#39;\n   */</span>\n  injectTo<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;head&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;body&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;head-prepend&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;body-prepend&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="handlehotupdate" tabindex="-1"><code>handleHotUpdate</code> <a class="header-anchor" href="#handlehotupdate" aria-hidden="true">#</a></h3><ul><li><p><strong>Type:</strong> <code>(ctx: HmrContext) =&gt; Array&lt;ModuleNode&gt; | void | Promise&lt;Array&lt;ModuleNode&gt; | void&gt;</code></p><p>Выполняет кастомную обработку HMR обновлений. Этот хук получает context object со следующей сигнатурой:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">HmrContext</span> <span class="token punctuation">{</span>\n  file<span class="token operator">:</span> <span class="token builtin">string</span>\n  timestamp<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">module</span>s<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span>\n  <span class="token function-variable function">read</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  server<span class="token operator">:</span> ViteDevServer\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><p><code>modules</code> массив модулей, которые затронуты изменениями в файле. Это массив, потому что одиночный файл может мапиться с несколькими модулями, обрабатываемыми сервером (например, Vue SFCs).</p></li><li><p><code>read</code> это асинхронная функция чтения, которая возвращает content файла. Это предоставляется потому что на некоторых системах, callback от изменений файла может происходить даже быстрее, чем пользователь успеет изменить файл и прямой метод <code>fs.readFile</code> вернёт пустой контент. Функция чтения нормализует это поведение.</p></li></ul><p>Хук можно использовать для:</p><ul><li><p>Фильтрации и отсечения ненужного списка затронутых модулей, чтобы HMR работал более точнее.</p></li><li><p>Возвращения пустого массива и выполнения полной пользовательской обработки HMR, отправив пользователю custom events:</p><div class="language-js"><pre><code><span class="token function">handleHotUpdate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> server <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  server<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span>\n    event<span class="token operator">:</span> <span class="token string">&#39;special-update&#39;</span><span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Клиентский код должен зарегистрировать соответствующий обработчик используя <a href="./api-hmr.html">HMR API</a> (это может быть встроено с помощью хука <code>transform</code> этого же плагина):</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;special-update&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// perform custom update</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul></li></ul><h2 id="порядок-применения-пnагинов" tabindex="-1">Порядок применения плагинов <a class="header-anchor" href="#порядок-применения-пnагинов" aria-hidden="true">#</a></h2><p>Vite плагин может дополнительно указать свойство <code>enforce</code> (похоже на webpack loaders) чтобы настроить порядок применения плагинов. Значение поля <code>enforce</code> может быть <code>&quot;pre&quot;</code> или <code>&quot;post&quot;</code>. Резолвнутые плагины будут идти в следующем порядке:</p><ul><li>Alias</li><li>Пользовательские плагины с <code>enforce: &#39;pre&#39;</code></li><li>Vite core плагины</li><li>Пользовательские плагины без значения enforce</li><li>Vite build плагины</li><li>Пользовательские плагины с <code>enforce: &#39;post&#39;</code></li><li>Vite post build плагины (minify, manifest, reporting)</li></ul><h2 id="усnовное-применение" tabindex="-1">Условное применение <a class="header-anchor" href="#усnовное-применение" aria-hidden="true">#</a></h2><p>По умолчанию плагины выполняются и для serve и для build. В случае, где плагин нужно применить только на serve или build, используйте свойство <code>apply</code>, чтобы запустить плагин только на <code>&#39;build&#39;</code> или <code>&#39;serve&#39;</code>:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;build-only&#39;</span><span class="token punctuation">,</span>\n    apply<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span> <span class="token comment">// or &#39;serve&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Также для большего контроля можно использовать какую-нибудь функцию:</p><div class="language-js"><pre><code><span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> <span class="token punctuation">{</span> command <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// apply only on build but not for SSR</span>\n  <span class="token keyword">return</span> command <span class="token operator">===</span> <span class="token string">&#39;build&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>ssr\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="совместимость-с-rollup-пnагинами" tabindex="-1">Совместимость с Rollup плагинами <a class="header-anchor" href="#совместимость-с-rollup-пnагинами" aria-hidden="true">#</a></h2><p>Изрядное количество подключаемых Rollup плагинов будут работать прямо как Vite плагины (например <code>@rollup/plugin-alias</code> или <code>@rollup/plugin-json</code>), но не все плагины работают так, поскольку некоторые хуки плагинов не имеют смысла в (несобранном) unbundled dev сервер контексте.</p><p>В общем, если плагин Rollup соответствует следующим критериям, то он должен работать как простой Vite плагин:</p><ul><li>Он не использует <a href="https://rollupjs.org/guide/en/#moduleparsed" target="_blank" rel="noopener noreferrer"><code>moduleParsed</code></a> хук.</li><li>Он не имеет жёсткой связи с bundle-phase хуками и output-phase хуками.</li></ul><p>Если Rollup плагин может быть применим только на build phase, то лучше указать его в <code>build.rollupOptions.plugins</code>.</p><p>Вы также можете дополнить существующий Rollup плагин Vite-only свойствами:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> example <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-example&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      enforce<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n      apply<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Ознакомьтесь с <a href="https://vite-rollup-plugins.patak.dev" target="_blank" rel="noopener noreferrer">Vite Rollup Plugins</a> - список официальных совместимых Rollup плагинов с пользовательскими инструкциями.</p><h2 id="нормаnизация-путей" tabindex="-1">Нормализация путей <a class="header-anchor" href="#нормаnизация-путей" aria-hidden="true">#</a></h2><p>Vite нормализует пути при резолве id, чтобы использовать POSIX разделители ( / ) при сохранении volume в Windows. С другой стороны, Rollup оставляет нетронутыми пути по умолчанию, поэтому резолвнутые id имеют win32 разделители ( \\ ) в Windows. Однако, Rollup плагины используют <a href="https://github.com/rollup/plugins/tree/master/packages/pluginutils#normalizepath" target="_blank" rel="noopener noreferrer"><code>normalizePath</code> utility function</a> из <code>@rollup/pluginutils</code> внутренне, который преобразует разделители в POSIX до выполнения сравнения. Это значит, что когда эти плагины используются в Vite, <code>include</code> и <code>exclude</code> config pattern и другие аналогичные пути для сравнения резолвнутых id работают правильно.</p><p>Итак, для Vite плагинов, при сравнении резолвнутых путей id важно сначала нормализовать пути для использования POSIX разделителей. Эквивалентная утилитарная функция <code>normalizePath</code> экспортируется из модуля <code>vite</code>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> normalizePath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n\n<span class="token function">normalizePath</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\\\bar&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;foo/bar&#39;</span>\n<span class="token function">normalizePath</span><span class="token punctuation">(</span><span class="token string">&#39;foo/bar&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;foo/bar&#39;</span>\n</code></pre></div>',68)];p.render=function(a,t,p,o,c,l){return n(),s("div",null,e)};export{t as __pageData,p as default};
