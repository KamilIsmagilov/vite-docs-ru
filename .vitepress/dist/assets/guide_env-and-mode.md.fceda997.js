import{o as e,c as o,d as n}from"./app.877e1a61.js";const d='{"title":"Env переменные и Modes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Env переменные","slug":"env-переменные"},{"level":3,"title":"Production замена","slug":"production-замена"},{"level":2,"title":".env Файлы","slug":"env-файnы"},{"level":3,"title":"IntelliSense","slug":"intellisense"},{"level":2,"title":"Modes","slug":"modes"}],"relativePath":"guide/env-and-mode.md","lastUpdated":1631746477896}',t={},a=[n('<h1 id="env-переменные-и-modes" tabindex="-1">Env переменные и Modes <a class="header-anchor" href="#env-переменные-и-modes" aria-hidden="true">#</a></h1><h2 id="env-переменные" tabindex="-1">Env переменные <a class="header-anchor" href="#env-переменные" aria-hidden="true">#</a></h2><blockquote><p>Примечание переводчика: env variables - переменные окружающей среды, но для упрощения в тексте будет использоваться просто термин env переменные. Также mode - режим, но в тексте будут взаимозаменяемо использоваться оба термина.</p></blockquote><p>Vite отдаёт env переменные в специальном объекте <strong><code>import.<wbr>meta.env</code></strong>. Некоторые встроенные (built-in) переменные доступны в любых случаях:</p><ul><li><p><strong><code>import.<wbr>meta.env.MODE</code></strong>: {string} <a href="#modes">mode</a> в котором запущено приложение.</p></li><li><p><strong><code>import.<wbr>meta.env.BASE_URL</code></strong>: {string} base url, по которому доступно приложение. Это определено с помощью <a href="/config/#base"><code>base</code> config option</a>.</p></li><li><p><strong><code>import.<wbr>meta.env.PROD</code></strong>: {boolean} запущено ли приложение как production.</p></li><li><p><strong><code>import.<wbr>meta.env.DEV</code></strong>: {boolean} запущено ли приложение как development (всегда обратное значению <code>import.<wbr>meta.env.PROD</code>)</p></li></ul><h3 id="production-замена" tabindex="-1">Production замена <a class="header-anchor" href="#production-замена" aria-hidden="true">#</a></h3><p>Во время production, эти env переменные <strong>заменяются статически</strong>. Поэтому необходимо всегда ссылаться на них, используя полную статическую строку. Например, dynamic key access (динамический доступ по ключу) как <code>import.<wbr>meta.env[key]</code> не будет работать.</p><p>Также эти строки заменятся, если они появятся в JavaScript строках и Vue templates. Это редко когда может случиться, но всё же может произойти непреднамеренно. В этом случае вы сможете увидеть такие ошибки: <code>Missing Semicolon</code> или <code>Unexpected token</code>, например, когда <code>&quot;process.<wbr>env.NODE_ENV: &quot;</code> трансформируется в <code>&quot;&quot;development&quot;: &quot;</code>. Вот пути, как разрешить эту ситуацию:</p><ul><li><p>Для JavaScript строк, вы можете вставить в строку unicode zero-width space, например, <code>&#39;import.<wbr>meta\\u200b.env.MODE&#39;</code>.</p></li><li><p>Для Vue templates или других HTML строк, которые компилируются в строку JavaScript, вы можете использовать <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr" target="_blank" rel="noopener noreferrer"><code>&lt;wbr&gt;</code> tag</a>, например, <code>import.<wbr>meta.&lt;wbr&gt;env.MODE</code>.</p></li></ul><h2 id="env-файnы" tabindex="-1"><code>.env</code> Файлы <a class="header-anchor" href="#env-файnы" aria-hidden="true">#</a></h2><p>Vite использует <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener noreferrer">dotenv</a> чтобы загрузить дополнительные environment переменные из следующих файлов в вашей <a href="/config/#envdir">environment directory</a>:</p><div class="language-"><pre><code>.env                # загружается в любых случаях\n.env.local          # загружается в любых случаях, игнорируется git&#39;ом\n.env.[mode]         # загружается только в указанном mode\n.env.[mode].local   # загружается только в указанном mode, игнорируется git&#39;ом\n</code></pre></div><p>Загруженные env переменные также доступны клиентскому исходному коду через <code>import.<wbr>meta.env</code>.</p><p>Чтобы предотвратить случайную утечку env переменных клиенту, только переменные с префиксом <code>VITE_</code> отдаются Vite-processed коду. Например, в следующем файле:</p><div class="language-"><pre><code>DB_PASSWORD=foobar\nVITE_SOME_KEY=123\n</code></pre></div><p>Только переменная <code>VITE_SOME_KEY</code> будет отдана <code>import.<wbr>meta.env.VITE_SOME_KEY</code> вашему клиентскому исходному коду, а <code>DB_PASSWORD</code> не будет доступен там.</p><p>Если вы хотите кастомизировать префикс для env переменных, смотрите параметр <a href="/config/index.html#envprefix">envPrefix</a>.</p><div class="warning custom-block"><p class="custom-block-title">Предостережение о безопасности</p><ul><li><p><code>.env.*.local</code> файлы - локальные файлы (local-only) и они могут содержать важные переменные. Вам следует добавить <code>.local</code> в ваш <code>.gitignore</code> файл, чтобы избежать их сохранения в истории git.</p></li><li><p>Поскольку любые переменные переданные Vite исходному коду, попадут в клиентскую сборку, <code>VITE_*</code> переменные <em>не</em> должны содержать значимую, важную информацию.</p></li></ul></div><h3 id="intellisense" tabindex="-1">IntelliSense <a class="header-anchor" href="#intellisense" aria-hidden="true">#</a></h3><p>По умолчанию, Vite предоставляет определение типов для <code>import.<wbr>meta.env</code>. Хотя вы можете определить больше пользовательских переменных в <code>.env.[mode]</code>файлах, возможно вам захочется использовать TypeScript IntelliSense для определённых пользователем (user-defined) env переменных с префиксом <code>VITE_</code>.</p><p>Чтобы сделать это, вы можете создать файл <code>env.d.ts</code> в<code>src</code> директории, затем расширить <code>ImportMetaEnv</code> на примере этого:</p><div class="language-typescript"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>\n  <span class="token constant">VITE_APP_TITLE</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">// more env variables...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-hidden="true">#</a></h2><p>По умолчанию, dev сервер (<code>serve</code> команда) запускается в <code>development</code> mode (режиме), и <code>build</code> команда запускает сервер в <code>production</code> mode.</p><p>Это значит, что когда вы запускаете <code>vite build</code>, он загрузит env переменные из <code>.env.production</code> если есть они есть:</p><div class="language-"><pre><code># .env.production\nVITE_APP_TITLE=My App\n</code></pre></div><p>В вашем приложении, вы можете вывести title используя <code>import.<wbr>meta.env.VITE_APP_TITLE</code>.</p><p>Однако, важно понимать, что <strong>mode</strong> более широкое понятие, чем просто development vs. production. Типичный пример, когда вам захочется иметь &quot;staging&quot; mode, где вы сможете видеть production-like поведение приложения, но с немного другими env переменными, а не с теми переменными, которые используются в production.</p><p>Вы можете переписать дефолтный mode используемый командами, передав опциональный флаг <code>--mode</code>. Например, если вы хотите собрать ваше приложение для нашего гипотетического staging режима:</p><div class="language-bash"><pre><code>vite build --mode staging\n</code></pre></div><p>И чтобы получить желаемое поведение, нам нужен <code>.env.staging</code> файл:</p><div class="language-"><pre><code># .env.staging\nNODE_ENV=production\nVITE_APP_TITLE=My App (staging)\n</code></pre></div><p>Сейчас ваше staging приложение должно иметь production-like поведение, но отображать другой заголовок, отличный от production версии.</p>',33)];t.render=function(n,d,t,c,i,r){return e(),o("div",null,a)};export{d as __pageData,t as default};
