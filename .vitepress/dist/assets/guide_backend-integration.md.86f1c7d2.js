import{o as s,c as n,d as a}from"./app.877e1a61.js";const t='{"title":"Backend интеграция","description":"","frontmatter":{},"relativePath":"guide/backend-integration.md","lastUpdated":1631747277518}',p={},o=[a('<h1 id="backend-интеграция" tabindex="-1">Backend интеграция <a class="header-anchor" href="#backend-интеграция" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">Заметка</p><p>Если вы хотите сёрвить HTML используя традиционный backend (например, Rails, Laravel), но хотите использовать Vite для обработки ресурсов (assets), то посмотрите существующий список интеграций в <a href="https://github.com/vitejs/awesome-vite#integrations-with-backends" target="_blank" rel="noopener noreferrer">Awesome Vite</a>.</p><p>Если Вам нужна кастомная интеграция, вы можете следовать инструкциям, описанным в этом руководстве, чтобы настроить всё самостоятельно.</p></div><ol><li><p>В вашем Vite config файле, настройте entry и включите build manifest:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// generate manifest.json in outDir</span>\n    manifest<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// перепишите дефолтный .html entry</span>\n      input<span class="token operator">:</span> <span class="token string">&#39;/path/to/main.js&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Если вы не отключали <a href="/config/#build-polyfillmodulepreload">module preload polyfill</a>, вам также нужно заимпортить полифилы в вашем entry</p><div class="language-js"><pre><code><span class="token comment">// добавьте в начале вашего app entry</span>\n<span class="token keyword">import</span> <span class="token string">&#39;vite/modulepreload-polyfill&#39;</span>\n</code></pre></div></li><li><p>Для разработки, вставьте следующий код в ваш server&#39;s HTML шаблон (заменить<code>http://localhost:3000</code> с локальным URL, где запущен Vite):</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- if development --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/@vite/client<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>Также убедитесь, что сервер сконфигурирован для обработки статичных ресурсов (assets) в рабочей директории Vite, иначе assets, такие, как картинки не будут правильно грузиться.</p><p>Заметьте, если вы используете React с <code>@vitejs/plugin-react-refresh</code>, вам также надо будет добавить это до вышеупомянутого скрипта, поскольку плагин не может изменять HTML код, который вы сёрвите:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> RefreshRuntime <span class="token keyword">from</span> <span class="token string">&#39;http://localhost:3000/@react-refresh&#39;</span>\n  RefreshRuntime<span class="token punctuation">.</span><span class="token function">injectIntoGlobalHook</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>\n  window<span class="token punctuation">.</span><span class="token function-variable function">$RefreshReg$</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  window<span class="token punctuation">.</span><span class="token function-variable function">$RefreshSig$</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> type\n  window<span class="token punctuation">.</span>__vite_plugin_react_preamble_installed__ <span class="token operator">=</span> <span class="token boolean">true</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>Для production: после запуска <code>vite build</code>, <code>manifest.json</code> файл будет сгенерирован рядом с другими asset файлами. Примерный manifest файл выглядит вот так:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;main.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/main.4889e940.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;isEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;dynamicImports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;views/foo.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;css&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;assets/main.b82dbe22.css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;assets/asset.0ab0f9cd.png&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;views/foo.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/foo.869aea0d.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;views/foo.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;isDynamicEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;_shared.83069a53.js&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;_shared.83069a53.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/shared.83069a53.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>Manifest имеет структуру <code>Record&lt;name, chunk&gt;</code></li><li>Для entry или dynamic entry chunks, ключ - это относительный src путь из корня проекта.</li><li>Для не entry chunks, ключ - это base name сгенерированного файла с префиксом <code>_</code>.</li><li>Chunks будут содержать информацию о их статичных и динамичных импортах (оба ключа, которые мапятся с соответствующим чанком в манифесте), и также это соответствует CSS и asset файлам (если они есть).</li></ul><p>Вы можете использовать этот файл для рендера ссылок или preload directives с хэшированными названиями файлов (запомните: приведённый здесь синтаксис только для ознакомления, замените его своим server templating language):</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- if production --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/{{ manifest[<span class="token punctuation">&#39;</span>main.js<span class="token punctuation">&#39;</span>].css }}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/{{ manifest[<span class="token punctuation">&#39;</span>main.js<span class="token punctuation">&#39;</span>].file }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ol>',3)];p.render=function(a,t,p,e,c,l){return s(),n("div",null,o)};export{t as __pageData,p as default};
