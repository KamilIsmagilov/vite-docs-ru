import{o as n,c as s,d as a}from"./app.877e1a61.js";const t='{"title":"Сборка для Production","description":"","frontmatter":{},"headers":[{"level":2,"title":"Поддержка браузеров","slug":"поддержка-браузеров"},{"level":2,"title":"Public Base Path","slug":"public-base-path"},{"level":2,"title":"Настройка сборки","slug":"настройка-сборки"},{"level":2,"title":"Rebuild при изменении файлов","slug":"rebuild-при-изменении-файnов"},{"level":2,"title":"Multi-Page App (Многостраничное приложение)","slug":"multi-page-app-многостраничное-приnожение"},{"level":2,"title":"Library Mode","slug":"library-mode"}],"relativePath":"guide/build.md","lastUpdated":1631747168780}',p={},e=[a('<h1 id="сборка-дnя-production" tabindex="-1">Сборка для Production <a class="header-anchor" href="#сборка-дnя-production" aria-hidden="true">#</a></h1><p>Когда приходит время деплоить ваше приложение на прод, просто запустите команду <code>vite build</code>. По умолчанию в сборке используется <code>&lt;root&gt;/index.html</code> как точка входа (entry point) и создаёт application bundle, который подходит для размещения на статическом хостинг сервисе. Ознакомьтесь с руководством <a href="./static-deploy.html">Деплой статического сайта</a>, чтобы посмотреть как это происходит на популярных платформах.</p><h2 id="поддержка-браузеров" tabindex="-1">Поддержка браузеров <a class="header-anchor" href="#поддержка-браузеров" aria-hidden="true">#</a></h2><p>Production сборка подразумевает поддержку для современного JavaScript. По умолчанию, Vite нацелен на браузеры, которые поддерживают <a href="https://caniuse.com/es6-module" target="_blank" rel="noopener noreferrer">нативный ESM скрипт тег</a> и <a href="https://caniuse.com/es6-module-dynamic-import" target="_blank" rel="noopener noreferrer">нативный ESM dynamic import</a>. Как референс для Вас, Vite использует это <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener noreferrer">browserslist</a>:</p><div class="language-"><pre><code>defaults and supports es6-module and supports es6-module-dynamic-import, not opera &gt; 0, not samsung &gt; 0, not and_qq &gt; 0\n</code></pre></div><p>Вы можете указать кастомные браузеры через <a href="/config/#build-target"><code>build.target</code> config option</a>, где самая нижняя цель - <code>es2015</code>.</p><p>Обратите внимание, по умолчанию, Bite обрабатывает только синтаксические трансформации и <strong>не добавляет полифилов по умолчанию</strong>. Вы можете ознакомиться с <a href="https://polyfill.io/v3/" target="_blank" rel="noopener noreferrer">Polyfill.io</a> - сервис, который автоматически генерирует сборку полифилов основываясь на пользовательской browser UserAgent строке.</p><p>Старые браузеры могут быть поддержаны с помощью <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noopener noreferrer">@vitejs/plugin-legacy</a>, который автоматически сгенерирует legacy chunks и соответствующие полифилы для ES фич. Legacy chunks загружаются по условию только в браузерах, которые не поддерживают нативный ESM.</p><h2 id="public-base-path" tabindex="-1">Public Base Path <a class="header-anchor" href="#public-base-path" aria-hidden="true">#</a></h2><ul><li>Связанный раздел: <a href="./assets.html">Обработка ресурсов</a></li></ul><p>Если вы деплоите ваш проект с вложенным public path, то просто укажите <a href="/config/#base"><code>base</code> config option</a> и все пути на asset будут преобразованы в соответствующие пути. Этот параметр может быть также указан, как флаг командной строки, например <code>vite build --base=/my/public/path/</code>.</p><p>URL JS-импортированный ресурсов, CSS <code>url()</code> ссылки и ссылки на assets в ваших <code>.html</code> файлах все автоматически корректируются с учётом этого параметра во время сборки.</p><p>Исключение только когда вам нужно динамически сконкатенировать URL адреса на лету. В этом случае Вы можете использовать глобальную переменную <code>import.<wbr>meta.env.BASE_URL</code>, которая будет являться public base путём. Заметьте, эта переменная статически заменяется во время сборки, поэтому она должна появляться в коде в таком виде как она есть (т.е. <code>import.<wbr>meta.env[&#39;BASE_URL&#39;]</code> не сработает).</p><h2 id="настройка-сборки" tabindex="-1">Настройка сборки <a class="header-anchor" href="#настройка-сборки" aria-hidden="true">#</a></h2><p>Сборка может быть настроена через различные <a href="/config/#build-options">build config options</a>. В частности, Вы можете прямо указать <a href="https://rollupjs.org/guide/en/#big-list-of-options" target="_blank" rel="noopener noreferrer">Rollup options</a> через <code>build.rollupOptions</code>:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// https://rollupjs.org/guide/en/#big-list-of-options</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Например, Вы можете указать множественный (multiple) Rollup output с плагинами, которые применяются только во время сборки.</p><h2 id="rebuild-при-изменении-файnов" tabindex="-1">Rebuild при изменении файлов <a class="header-anchor" href="#rebuild-при-изменении-файnов" aria-hidden="true">#</a></h2><p>Вы можете активировать rollup watcher с помощью <code>vite build --watch</code>. Или Вы можете напрямую указать <a href="https://rollupjs.org/guide/en/#watch-options" target="_blank" rel="noopener noreferrer"><code>WatcherOptions</code></a> через <code>build.watch</code>:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// https://rollupjs.org/guide/en/#watch-options</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="multi-page-app-многостраничное-приnожение" tabindex="-1">Multi-Page App (Многостраничное приложение) <a class="header-anchor" href="#multi-page-app-многостраничное-приnожение" aria-hidden="true">#</a></h2><p>Предположим, у Вас есть следующая структура проекта:</p><div class="language-"><pre><code>├── package.json\n├── vite.config.js\n├── index.html\n├── main.js\n└── nested\n    ├── index.html\n    └── nested.js\n</code></pre></div><p>Во время dev разработки, просто переходите на <code>/nested/</code> - это работает как ожидается, так же как в обычном статическом файл-сервере.</p><p>Во время сборки (build), всё что Вам нужно сделать - это указать все <code>.html</code> файлы как точки входа (entry points):</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      input<span class="token operator">:</span> <span class="token punctuation">{</span>\n        main<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        nested<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;nested/index.html&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Если вы указали другой рут (корневой каталог), помните что <code>__dirname</code> всё ещё будет папкой вашего vite.config.js файла когда резолвятся input пути. Следовательно, Вам нужно будет добавить <code>root</code> entry в аргументы для <code>resolve</code>.</p><h2 id="library-mode" tabindex="-1">Library Mode <a class="header-anchor" href="#library-mode" aria-hidden="true">#</a></h2><p>Когда Вы разрабатываете библиотеку для браузеров, Вы вероятно тратите большинство вашего времени на test/demo страницу, которая импортит саму вашу библиотеку. С Vite Вы можете использовать <code>index.html</code> для этих целей, чтобы получить приятный development experience.</p><p>Когда пришло время собрать вашу библиотеку для её выката, используйте <a href="/config/#build-lib"><code>build.lib</code> config option</a>. Убедитесь что вы экстернализировали (externalize, исключили), которые вы не хотите собирать в своей библиотеке, например <code>vue</code> или <code>react</code>:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lib<span class="token operator">:</span> <span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;lib/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;MyLib&#39;</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">fileName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">format</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my-lib.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>format<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// убедитесь, что исключили библиотеки, которые не надо собирать</span>\n      <span class="token comment">// в вашу библиотеку (library)</span>\n      external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Предоставляем глобальные переменные, чтобы использовать их в UMD сборке</span>\n        <span class="token comment">// для экстернализированных зависимостей</span>\n        globals<span class="token operator">:</span> <span class="token punctuation">{</span>\n          vue<span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Запуск <code>vite build</code> с этим конфигом использует Rollup preset, который ориентирован на генерацию (предоставление) библиотек (libraries) и производит два формата: <code>es</code> и <code>umd</code> (настраиваются через <code>build.lib</code>):</p><div class="language-"><pre><code>$ vite build\nbuilding for production...\n[write] my-lib.es.js 0.08kb, brotli: 0.07kb\n[write] my-lib.umd.js 0.30kb, brotli: 0.16kb\n</code></pre></div><p>Рекомендуемый <code>package.json</code> файл для вашей lib (библиотеки):</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-lib&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dist&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.umd.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.es.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.es.js&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.umd.js&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',35)];p.render=function(a,t,p,o,c,l){return n(),s("div",null,e)};export{t as __pageData,p as default};
