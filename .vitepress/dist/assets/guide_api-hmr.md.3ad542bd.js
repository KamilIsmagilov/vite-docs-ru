import{o as n,c as a,d as s}from"./app.877e1a61.js";const t='{"title":"HMR API","description":"","frontmatter":{},"headers":[{"level":2,"title":"Обязательные Conditional Guard","slug":"обязатеnьные-conditional-guard"},{"level":2,"title":"hot.accept(cb)","slug":"hot-accept-cb"},{"level":2,"title":"hot.accept(deps, cb)","slug":"hot-accept-deps-cb"},{"level":2,"title":"hot.dispose(cb)","slug":"hot-dispose-cb"},{"level":2,"title":"hot.data","slug":"hot-data"},{"level":2,"title":"hot.decline()","slug":"hot-decline"},{"level":2,"title":"hot.invalidate()","slug":"hot-invalidate"},{"level":2,"title":"hot.on(event, cb)","slug":"hot-on-event-cb"}],"relativePath":"guide/api-hmr.md","lastUpdated":1631748060148}',p={},o=[s('<h1 id="hmr-api" tabindex="-1">HMR API <a class="header-anchor" href="#hmr-api" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">Заметка</p><p>Это клиентский HMR API. Для обработки HMR обновлений в плагинах, смотрите <a href="./api-plugin.html#handlehotupdate">handleHotUpdate</a>.</p><p>Руководство HMR API в первую очередь предназначено для авторов фреймворков и инструментов. Как конечный пользователь, вы скорее всего будете работать с уже настроенным для вас HMR в специальном (starter template) стартовом шаблоне с использованием нужного фреймворка</p></div><p>Vite предоставляет свой ручной HMR API через специальный объект <code>import.<wbr>meta.hot</code>:</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> hot<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> data<span class="token operator">:</span> <span class="token builtin">any</span>\n\n    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mods<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">decline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n    <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="обязатеnьные-conditional-guard" tabindex="-1">Обязательные Conditional Guard <a class="header-anchor" href="#обязатеnьные-conditional-guard" aria-hidden="true">#</a></h2><p>Прежде всего, убедитесь что вы позаботились обо всех использованиях HMR API и добавили условные блоки, чтобы код мог делать tree-shaken в production:</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// HMR code</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-accept-cb" tabindex="-1"><code>hot.accept(cb)</code> <a class="header-anchor" href="#hot-accept-cb" aria-hidden="true">#</a></h2><p>Чтобы модуль самопринялся (self-accept), используйте <code>import.<wbr>meta.hot.accept</code> с callback&#39;ом, который принимает обновлённый модуль:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newModule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updated: count is now &#39;</span><span class="token punctuation">,</span> newModule<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Модуль, который принимает &quot;accepts&quot; hot обновления считается <strong>HMR boundary</strong>.</p><p>Заметьте, что Vite&#39;s HMR на самом деле не меняет оригинальный импортированный модуль: если HMR boundary модуль реэкспортирует импорты из зависимости, то он отвечает за обновление этих реэкспортов (и эти экспорты должны использовать <code>let</code>). В дополнение, импортеры не будут уведомлены об изменениях вверх по цепочки от boundary module.</p><p>Это упрощённая реализация HMR - достаточна для большинства случаев разработки, и в то же время позволяет нам опустить дорогостоящую работу по созданию proxy модулей.</p><h2 id="hot-accept-deps-cb" tabindex="-1"><code>hot.accept(deps, cb)</code> <a class="header-anchor" href="#hot-accept-deps-cb" aria-hidden="true">#</a></h2><p>Модуль также может принимать обновления напрямую из зависимостей, без своей перезагрузки:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newFoo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// the callback принимает обновлённый &#39;./foo.js&#39; модуль</span>\n    newFoo<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Также может принимать массив зависимых модулей:</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./bar.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>newFooModule<span class="token punctuation">,</span> newBarModule<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// the callback принимает обновлённые модули в массиве</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-dispose-cb" tabindex="-1"><code>hot.dispose(cb)</code> <a class="header-anchor" href="#hot-dispose-cb" aria-hidden="true">#</a></h2><p>Самостоятельно принимающий модуль или модуль, который должен приняться другими может использовать <code>hot.dispose</code>, чтобы почистить любые стойкие побочные эффекты &quot;side effects&quot; созданные его обновлённой копией:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">setupSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">setupSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// cleanup side effect</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-data" tabindex="-1"><code>hot.data</code> <a class="header-anchor" href="#hot-data" aria-hidden="true">#</a></h2><p><code>import.<wbr>meta.hot.data</code> объект сохраняется в разных экземплярах одного и того же обновлённого модуля. Его можно использовать, чтобы передать информацию из предыдущей версии модуля в следующую.</p><h2 id="hot-decline" tabindex="-1"><code>hot.decline()</code> <a class="header-anchor" href="#hot-decline" aria-hidden="true">#</a></h2><p>Вызов <code>import.<wbr>meta.hot.decline()</code> означает, что модуль не hot-updatable, и браузер должен выполнить полную перезагрузку если этот модуль встречается во время всплытия HMR изменений.</p><h2 id="hot-invalidate" tabindex="-1"><code>hot.invalidate()</code> <a class="header-anchor" href="#hot-invalidate" aria-hidden="true">#</a></h2><p>Сейчас, вызов <code>import.<wbr>meta.hot.invalidate()</code> просто перезагрузит страницу.</p><h2 id="hot-on-event-cb" tabindex="-1"><code>hot.on(event, cb)</code> <a class="header-anchor" href="#hot-on-event-cb" aria-hidden="true">#</a></h2><p>Слушать HMR событие.</p><p>Следующие HMR события Vite отправляет (dispatched) автоматически:</p><ul><li><code>&#39;vite:beforeUpdate&#39;</code> прямо перед тем, когда будет применено обновление (например, модуль будет заменен)</li><li><code>&#39;vite:beforeFullReload&#39;</code> перед тем, когда случится полная перезагрузка</li><li><code>&#39;vite:beforePrune&#39;</code> перед тем, когда модуль, который больше не нужен очиститься</li><li><code>&#39;vite:error&#39;</code> когда происходит ошибка (error) (например, syntax error)</li></ul><p>Кастомные HMR события также могут быть отправлены из плагинов. Смотрите <a href="./api-plugin.html#handlehotupdate">handleHotUpdate</a> для большей информации.</p>',30)];p.render=function(s,t,p,e,c,l){return n(),a("div",null,o)};export{t as __pageData,p as default};
